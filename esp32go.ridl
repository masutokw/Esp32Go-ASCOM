// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Library Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 20/05/2025 13:19:38 (- $Rev: 12980 $, 402279593).

[
  uuid(1E06C881-9ACE-461A-AE17-0A0981B24AB1),
  version(1.0),
  helpstring("PicgotoPlus Library")

]
library Esp32go
{

  importlib("stdole2.tlb");

  interface ITelescope;
  coclass Telescope;
  interface IRate;
  coclass Rate;
  interface IFocuser;
  coclass Focuser;
  interface IAxisRates;
  interface ITrackingRates;
  coclass TrackingRates;
  coclass AxisRates;
  coclass Rotator;
  interface IRotator;
  interface IFilterWheel;
  coclass FilterWheel;


  [
    uuid(3B96F58A-5732-4A08-80AE-1AADEA596C94),
    version(1.0)
  ]
  enum AlignmentModes
  {
    algAltAz = 0,
    algGermanPolar = 1,
    algPolar = 2
  };

  [
    uuid(D280DBEA-5834-4144-AEDA-F32C25942EA6),
    version(1.0)
  ]
  enum EquatorialCoordinateType
  {
    equLocalTopocentric = 1,
    equJ2000 = 2,
    equJ2050 = 3,
    equOther = 0,
    equB1950 = 4
  };

  [
    uuid(5144DAD7-93D5-432E-A343-0A02AF326B95),
    version(1.0)
  ]
  enum PierSide
  {
    pierEast = 0,
    pierWest = 1
  };

  [
    uuid(A0502183-51DF-4EEA-A2DD-87365E32DBCB),
    version(1.0)
  ]
  enum DriveRates
  {
    driveSidereal = 0,
    driveLunar = 1,
    driveSolar = 2,
    driveKing = 3
  };

  [
    uuid(CFE0D17E-C8CD-47FF-942E-616498EF159F),
    version(1.0)
  ]
  enum TelescopeAxes
  {
    axisPrimary = 0,
    axisSecondary = 1,
    axisTertiary = 2
  };

  [
    uuid(3722DBC2-C6EB-45B3-9B90-5F6986733655),
    version(1.0)
  ]
  enum GuideDirections
  {
    guideNorth = 0,
    guideSouth = 1,
    guideEast = 2,
    guideWest = 3
  };

  [
    uuid(80150348-03DD-4346-A55B-D5876884A313),
    version(3.0),
    helpstring("Dispatch interface for Telescope Object"),
    dual,
    oleautomation
  ]
  interface ITelescope: IDispatch
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall AlignmentMode([out, retval] enum AlignmentModes* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Altitude([out, retval] double* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall ApertureArea([out, retval] double* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall ApertureDiameter([out, retval] double* Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall AtHome([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall AtPark([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall Azimuth([out, retval] double* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall CanFindHome([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall CanPark([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall CanPulseGuide([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall CanSetDeclinationRate([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall CanSetGuideRates([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall CanSetPark([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall CanSetPierSide([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall CanSetRightAscensionRate([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall CanSetTracking([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall CanSlew([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000012)]
    HRESULT _stdcall CanSlewAltAz([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000013)]
    HRESULT _stdcall CanSlewAltAzAsync([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000014)]
    HRESULT _stdcall CanSlewAsync([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000015)]
    HRESULT _stdcall CanSync([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000016)]
    HRESULT _stdcall CanSyncAltAz([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000017)]
    HRESULT _stdcall CanUnpark([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000018)]
    HRESULT _stdcall Connected([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000018)]
    HRESULT _stdcall Connected([in] VARIANT_BOOL Value);
    [propget, id(0x00000019)]
    HRESULT _stdcall Declination([out, retval] double* Value);
    [propget, id(0x0000001A)]
    HRESULT _stdcall DeclinationRate([out, retval] double* Value);
    [propput, id(0x0000001A)]
    HRESULT _stdcall DeclinationRate([in] double Value);
    [propget, id(0x0000001B)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propget, id(0x0000001C)]
    HRESULT _stdcall DoesRefraction([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000001C)]
    HRESULT _stdcall DoesRefraction([in] VARIANT_BOOL Value);
    [propget, id(0x0000001D)]
    HRESULT _stdcall DriverInfo([out, retval] BSTR* Value);
    [propget, id(0x0000001E)]
    HRESULT _stdcall DriverVersion([out, retval] BSTR* Value);
    [propget, id(0x0000001F)]
    HRESULT _stdcall EquatorialSystem([out, retval] enum EquatorialCoordinateType* Value);
    [propget, id(0x00000020)]
    HRESULT _stdcall FocalLength([out, retval] double* Value);
    [propget, id(0x00000021)]
    HRESULT _stdcall GuideRateDeclination([out, retval] double* Value);
    [propput, id(0x00000021)]
    HRESULT _stdcall GuideRateDeclination([in] double Value);
    [propget, id(0x00000022)]
    HRESULT _stdcall GuideRateRightAscension([out, retval] double* Value);
    [propput, id(0x00000022)]
    HRESULT _stdcall GuideRateRightAscension([in] double Value);
    [propget, id(0x00000023)]
    HRESULT _stdcall InterfaceVersion([out, retval] int* Value);
    [propget, id(0x00000024)]
    HRESULT _stdcall IsPulseGuiding([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000025)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x00000026)]
    HRESULT _stdcall RightAscension([out, retval] double* Value);
    [propget, id(0x00000027)]
    HRESULT _stdcall RightAscensionRate([out, retval] double* Value);
    [propput, id(0x00000027)]
    HRESULT _stdcall RightAscensionRate([in] double Value);
    [propget, id(0x00000028)]
    HRESULT _stdcall SideOfPier([out, retval] enum PierSide* Value);
    [propput, id(0x00000028)]
    HRESULT _stdcall SideOfPier([in] enum PierSide Value);
    [propget, id(0x00000029)]
    HRESULT _stdcall SiderealTime([out, retval] double* Value);
    [propget, id(0x0000002A)]
    HRESULT _stdcall SiteElevation([out, retval] double* Value);
    [propput, id(0x0000002A)]
    HRESULT _stdcall SiteElevation([in] double Value);
    [propget, id(0x0000002B)]
    HRESULT _stdcall SiteLatitude([out, retval] double* Value);
    [propput, id(0x0000002B)]
    HRESULT _stdcall SiteLatitude([in] double Value);
    [propget, id(0x0000002C)]
    HRESULT _stdcall SiteLongitude([out, retval] double* Value);
    [propput, id(0x0000002C)]
    HRESULT _stdcall SiteLongitude([in] double Value);
    [propget, id(0x0000002D)]
    HRESULT _stdcall Slewing([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000002E)]
    HRESULT _stdcall SlewSettleTime([out, retval] int* Value);
    [propput, id(0x0000002E)]
    HRESULT _stdcall SlewSettleTime([in] int Value);
    [propget, id(0x0000002F)]
    HRESULT _stdcall TargetDeclination([out, retval] double* Value);
    [propput, id(0x0000002F)]
    HRESULT _stdcall TargetDeclination([in] double Value);
    [propget, id(0x00000030)]
    HRESULT _stdcall TargetRightAscension([out, retval] double* Value);
    [propput, id(0x00000030)]
    HRESULT _stdcall TargetRightAscension([in] double Value);
    [propget, id(0x00000031)]
    HRESULT _stdcall Tracking([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000031)]
    HRESULT _stdcall Tracking([in] VARIANT_BOOL Value);
    [propget, id(0x00000032)]
    HRESULT _stdcall TrackingRate([out, retval] enum DriveRates* Value);
    [propput, id(0x00000032)]
    HRESULT _stdcall TrackingRate([in] enum DriveRates Value);
    [propget, id(0x00000033)]
    HRESULT _stdcall TrackingRates([out, retval] ITrackingRates** Value);
    [propget, id(0x00000034)]
    HRESULT _stdcall UTCDate([out, retval] DATE* Value);
    [propput, id(0x00000034)]
    HRESULT _stdcall UTCDate([in] DATE Value);
    [id(0x00000035)]
    HRESULT _stdcall AbortSlew(void);
    [id(0x00000036)]
    HRESULT _stdcall AxisRates([in] enum TelescopeAxes Axis);
    [id(0x00000037)]
    HRESULT _stdcall CanMoveAxis([in] enum TelescopeAxes Axis, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000038)]
    HRESULT _stdcall CommandBlind([in] BSTR Command, [in, optional, defaultvalue(False)] VARIANT_BOOL Raw);
    [id(0x00000039)]
    HRESULT _stdcall CommandBool([in] BSTR Command, [in, optional, defaultvalue(False)] VARIANT_BOOL Raw);
    [id(0x0000003A)]
    HRESULT _stdcall CommandString([in] BSTR Command, [in, defaultvalue(False)] VARIANT_BOOL Raw);
    [id(0x0000003B)]
    enum PierSide _stdcall DestinationSideOfPier([in] double RightAscension, [in] double Declination);
    [id(0x0000003C)]
    HRESULT _stdcall FindHome(void);
    [id(0x0000003D)]
    HRESULT _stdcall MoveAxis([in] enum TelescopeAxes Axis, [in] double Rate);
    [id(0x0000003E)]
    HRESULT _stdcall Park(void);
    [id(0x0000003F)]
    HRESULT _stdcall PulseGuide([in] enum GuideDirections Direction, [in] long Duration);
    [id(0x00000040)]
    HRESULT _stdcall SetPark(void);
    [id(0x00000041)]
    HRESULT _stdcall SetUpDialog(void);
    [id(0x00000042)]
    HRESULT _stdcall SlewToAltAz([in] double Azimut, [in] double Altitude);
    [id(0x00000043)]
    HRESULT _stdcall SlewToAltAzAsync([in] double Azimut, [in] double Altitude);
    [id(0x00000044)]
    HRESULT _stdcall SlewToCoordinates([in] double RightAscension, [in] double Declination);
    [id(0x00000045)]
    HRESULT _stdcall SlewToCoordinatesAsync([in] double RightAscension, [in] double Declination);
    [id(0x00000046)]
    HRESULT _stdcall SlewToTarget(void);
    [id(0x00000047)]
    HRESULT _stdcall SlewToTargetAsync(void);
    [id(0x00000048)]
    HRESULT _stdcall SyncToAltAz([in] double Azimuth, [in] double Altitude);
    [id(0x00000049)]
    HRESULT _stdcall SyncToCoordinates([in] double RightAscension, [in] double Declination);
    [id(0x0000004A)]
    HRESULT _stdcall SyncToTarget(void);
    [id(0x0000004B)]
    HRESULT _stdcall Unpark(void);
    [propget, id(0x000000C9)]
    HRESULT _stdcall SupportedActions([out, retval] VARIANT* Value);
  };

  [
    uuid(2DA681D4-4705-4920-95C4-488691BBE4B7),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IRate: IDispatch
  {
    [propget, id(0x00000004)]
    HRESULT _stdcall Maximum([out, retval] double* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall Maximum([in] double Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Minimum([out, retval] double* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall Minimum([in] double Value);
  };

  [
    uuid(FE6998A6-6164-49BB-A47B-F3D778F7AB4C),
    version(1.0),
    helpstring("ASCOM Focuser 1.0 Driver Interface"),
    dual,
    nonextensible,
    oleautomation
  ]
  interface IFocuser: IDispatch
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Absolute([out, retval] VARIANT_BOOL* __MIDL_0093);
    [propget, id(0x00000066)]
    HRESULT _stdcall IsMoving([out, retval] VARIANT_BOOL* __MIDL_0094);
    [propget, id(0x00000067)]
    HRESULT _stdcall Link([out, retval] VARIANT_BOOL* __MIDL_0095);
    [propput, id(0x00000067)]
    HRESULT _stdcall Link([in] VARIANT_BOOL __MIDL_0095);
    [propget, id(0x00000068)]
    HRESULT _stdcall MaxIncrement([out, retval] long* __MIDL_0097);
    [propget, id(0x00000069)]
    HRESULT _stdcall MaxStep([out, retval] long* __MIDL_0098);
    [propget, id(0x0000006A)]
    HRESULT _stdcall Position([out, retval] long* __MIDL_0099);
    [propget, id(0x0000006B)]
    HRESULT _stdcall StepSize([out, retval] double* __MIDL_0100);
    [propget, id(0x0000006C)]
    HRESULT _stdcall TempComp([out, retval] VARIANT_BOOL* __MIDL_0101);
    [propput, id(0x0000006C)]
    HRESULT _stdcall TempComp([in] VARIANT_BOOL __MIDL_0101);
    [propget, id(0x0000006D)]
    HRESULT _stdcall TempCompAvailable([out, retval] VARIANT_BOOL* __MIDL_0103);
    [propget, id(0x0000006E)]
    HRESULT _stdcall Temperature([out, retval] double* __MIDL_0104);
    [id(0x00000191)]
    HRESULT _stdcall Halt(void);
    [id(0x00000192)]
    HRESULT _stdcall SetUpDialog(void);
    [id(0x00000193)]
    HRESULT _stdcall Move([in] long val);
    [propget, id(0x000000C9)]
    HRESULT _stdcall Connected([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Connected([in] VARIANT_BOOL Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall InterfaceVersion([out, retval] int* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall DriverInfo([out, retval] BSTR* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall DriverVersion([out, retval] BSTR* Value);
  };

  [
    uuid(7DE18E3E-FBB1-4856-8F16-B1C91C88B200),
    version(1.0),
    helpstring("ASCOM Telescope Driver 2.0 Axis Rates Collection Interface"),
    dual,
    oleautomation
  ]
  interface IAxisRates: IDispatch
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Count([out, retval] long* __MIDL_0087);
    [propget, id(0x00000000)]
    HRESULT _stdcall Item([in] long Index, [out, retval] IRate** __MIDL_0088);
    [propget, id(0x00000074), hidden]
    HRESULT _stdcall NewEnum([out, retval] IEnumVARIANT** __MIDL_0089);
  };

  [
    uuid(AF07ABEC-343F-41BA-836E-AC9AF57CBFBA),
    version(1.0),
    helpstring("ASCOM Telescope Driver 2.0 Tracking Rates Collection Interface"),
    dual,
    oleautomation
  ]
  interface ITrackingRates: IDispatch
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Count([out, retval] long* __MIDL_0090);
    [propget, id(0x00000071)]
    HRESULT _stdcall Item([in] long Index, [out, retval] enum DriveRates* __MIDL_0091);
    [id(0x00000070)]
    HRESULT _stdcall GetEnumerator([out, retval] IEnumVARIANT** Param1);
    [id(0x000000C9)]
    VARIANT_BOOL _stdcall MoveNext(void);
    [id(0x000000CA)]
    HRESULT _stdcall Dispose(void);
  };

  [
    uuid(F74A1CDB-B5EB-4BFF-878C-58488C5DCBC9),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IRotator: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CanReverse([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Connected([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Connected([in] VARIANT_BOOL Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall IsMoving([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall IsMoving([in] VARIANT_BOOL Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Position([out, retval] float* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall Position([in] float Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Reverse([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Reverse([in] VARIANT_BOOL Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall StepSize([out, retval] float* Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall TargetPosition([out, retval] float* Value);
    [id(0x000000D0)]
    HRESULT _stdcall Halt(void);
    [id(0x000000D1)]
    HRESULT _stdcall Move([in] float Position);
    [id(0x000000D2)]
    HRESULT _stdcall MoveAbsolute([in] float POsition);
    [id(0x000000D3)]
    HRESULT _stdcall SetupDialog(void);
    [propget, id(0x000000D4)]
    HRESULT _stdcall DriverInfo([out, retval] BSTR* Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall InterfaceVersion([out, retval] byte* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall DriverVersion([out, retval] BSTR* Value);
    [id(0x000000D7)]
    HRESULT _stdcall CommandBlind([in] BSTR Command, [in] VARIANT_BOOL Raw);
    [propget, id(0x000000D8)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [id(0x000000DA)]
    HRESULT _stdcall MoveMechanical([in] float Position);
    [propget, id(0x000000DB)]
    HRESULT _stdcall MechanicalPosition([out, retval] float* Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall SupportedActions([out, retval] VARIANT* Value);
    [id(0x000000DD)]
    HRESULT _stdcall Sync([in] float Position);
  };

  [
    uuid(F67F4430-3191-4631-AB79-83A346917D4B),
    version(1.0),
    helpstring("ASCOM Filter Wheel 1.0 Driver Interface"),
    dual,
    oleautomation
  ]
  interface IFilterWheel: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Connected([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Connected([in] VARIANT_BOOL Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall FocusOffsets([out, retval] SAFEARRAY(long) * value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Names([out, retval] SAFEARRAY(BSTR) * Value);
    [id(0x000000CD)]
    HRESULT _stdcall SetupDialog(void);
    [propget, id(0x000000CE)]
    HRESULT _stdcall SupportedActions([out, retval] VARIANT* Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall DriverInfo([out, retval] BSTR* Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall DriverVersion([out, retval] BSTR* Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall InterfaceVersion([out, retval] byte* Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [id(0x000000D4)]
    HRESULT _stdcall Action([in] BSTR ActionName, [in] BSTR ActionParams);
    [id(0x000000D5)]
    HRESULT _stdcall CommandBlind([in] BSTR Command, [in, optional, defaultvalue(False)] VARIANT_BOOL raw);
    [id(0x000000D6)]
    HRESULT _stdcall CommandBool([in] BSTR command, [in, optional, defaultvalue(False)] VARIANT_BOOL raw);
    [id(0x000000D7)]
    HRESULT _stdcall CommandString([in] BSTR command, [in, optional, defaultvalue(False)] VARIANT_BOOL RAW);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Position([out, retval] short* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Position([in] short Value);
    [id(0x000000D8)]
    HRESULT _stdcall Dispose(void);
  };

  [
    uuid(E749BD8E-A0EE-4959-89EE-0AD503A88DFE),
    version(1.0),
    helpstring("Telescope Object")
  ]
  coclass Telescope
  {
    [default] interface ITelescope;
  };

  [
    uuid(88805DEB-A178-4B52-A3A2-AB6AB118991E),
    version(1.0)
  ]
  coclass Rate
  {
    [default] interface IRate;
  };

  [
    uuid(1CB394E5-5EE7-48C2-AC86-79211E713A24),
    version(1.0)
  ]
  coclass Focuser
  {
    [default] interface IFocuser;
  };

  [
    uuid(26702E69-B4B7-41EC-9D05-3A194A07F8A2),
    version(1.0)
  ]
  coclass TrackingRates
  {
    [default] interface ITrackingRates;
  };

  [
    uuid(8824AD94-D729-48EE-A61B-9547AA4D6F43),
    version(1.0)
  ]
  coclass AxisRates
  {
    [default] interface IAxisRates;
  };

  [
    uuid(E77D7F6E-0CC9-4935-B670-64D199A34053),
    version(1.0)
  ]
  coclass Rotator
  {
    [default] interface IRotator;
  };

  [
    uuid(20F749ED-2B90-4375-BE68-149F12760871)
  ]
  coclass FilterWheel
  {
    [default] interface IFilterWheel;
  };

};
